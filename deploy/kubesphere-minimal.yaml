# Namespaces
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubesphere.io/workspace: system-workspace
  name: kubesphere-controls-system
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubesphere.io/workspace: system-workspace
  name: kubesphere-monitoring-system
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubesphere.io/workspace: system-workspace
  name: kubesphere-system
---
# Configmaps
---
apiVersion: v1
data:
  Caddyfile: |
    :2018 {
      root /home
      authenticate {
        token-idle-timeout 40m
        redis-url redis://redis.kubesphere-system.svc:6379
        secret {$JWT_SECRET}
        path /
        except GET /kapis/openpitrix.io/v1/apps /kapis/openpitrix.io/v1/attachments /kapis/openpitrix.io/v1/categories
        except * /apis/account.kubesphere.io/v1alpha1/authenticate /kapis/iam.kubesphere.io/v1alpha2/login /kapis/iam.kubesphere.io/v1alpha2/authenticate /images /kapis/devops.kubesphere.io/v1alpha2/webhook/github /kapis/devops.kubesphere.io/v1alpha2/webhook/git /swagger /kapis/v1alpha1/configz
      }

      authentication {
        path /
        except * /kapis/tenant.kubesphere.io/v1alpha2 /kapis/alerting.kubesphere.io/v1/comment /kapis/alerting.kubesphere.io/v1/resource_type /kapis/alerting.kubesphere.io/v1/metric /kapis/notification.kubesphere.io /kapis/resources.kubesphere.io/v1alpha2/registry /kapis/iam.kubesphere.io/v1alpha2/rulesmapping /kapis/jenkins.kubesphere.io /kapis/devops.kubesphere.io /apis/devops.kubesphere.io /kapis/resources.kubesphere.io/v1alpha2/git/verify
      }

      swagger

      # k8s api
      proxy /api https://kubernetes.default {
        header_upstream Authorization "Bearer {$KUBESPHERE_TOKEN}"
        insecure_skip_verify
        transparent
        websocket
      }

      # fix jenkins auth plugin
      proxy /apis/account.kubesphere.io/v1alpha1/authenticate http://ks-account.kubesphere-system.svc/kapis/iam.kubesphere.io/v1alpha2/authenticate {
        without /apis/account.kubesphere.io/v1alpha1/authenticate
        transparent
      }

      # jenkins
      proxy /kapis/jenkins.kubesphere.io http://ks-jenkins.kubesphere-devops-system.svc {
        without /kapis/jenkins.kubesphere.io
        transparent
      }

      proxy /job http://ks-jenkins.kubesphere-devops-system.svc {
        transparent
      }

      # old devops api
      proxy /kapis/devops.kubesphere.io/v1alpha/ http://ks-devops.kubesphere-devops-system.svc/api {
        without /kapis/devops.kubesphere.io
        transparent
      }

      # new devops api
      proxy /kapis/devops.kubesphere.io/v1alpha2/ http://ks-apiserver.kubesphere-system.svc {
        transparent
      }

      # iam
      proxy /kapis/iam.kubesphere.io http://ks-account.kubesphere-system.svc {
        transparent
      }

      # tenant
      proxy /kapis/tenant.kubesphere.io http://ks-apiserver.kubesphere-system.svc {
        transparent
      }

      # operations
      proxy /kapis/operations.kubesphere.io http://ks-apiserver.kubesphere-system.svc {
        transparent
      }

      # openpitrix
      proxy /kapis/openpitrix.io http://ks-apiserver.kubesphere-system.svc {
        transparent
      }

      # logging
      proxy /kapis/logging.kubesphere.io http://ks-apiserver.kubesphere-system.svc {
        transparent
      }

      # alerting
      proxy /kapis/alerting.kubesphere.io http://alerting-client-server.kubesphere-alerting-system.svc:9200/api {
        without /kapis/alerting.kubesphere.io
        transparent
      }

      # servicemesh
      proxy /kapis/servicemesh.kubesphere.io http://ks-apiserver.kubesphere-system.svc {
        transparent
      }

      proxy /kapis/resources.kubesphere.io http://ks-apiserver.kubesphere-system.svc {
        transparent
      }

      proxy /kapis/metrics.kubesphere.io http://ks-apiserver.kubesphere-system.svc {
        transparent
      }

      # terminal
      proxy /kapis/terminal.kubesphere.io http://ks-apiserver.kubesphere-system.svc {
        transparent
        websocket
      }

      # monitoring
      proxy /kapis/monitoring.kubesphere.io http://ks-apiserver.kubesphere-system.svc {
        transparent
      }

      # notification
      proxy /kapis/notification.kubesphere.io http://notification.kubesphere-alerting-system.svc:9200 {
        without /kapis/notification.kubesphere.io
        transparent
      }

      # everything else goes to ks-apiserver
      proxy /kapis http://ks-apiserver.kubesphere-system.svc {
        transparent
      }

      log / stdout "{remote} {when} {method} {uri} {proto} {status} {size} {latency_ms}ms"
    }
kind: ConfigMap
metadata:
  name: caddyfile
  namespace: kubesphere-system
---
apiVersion: v1
data:
  local_config.yaml: |
    server:
      gatewayServer:
        url: http://ks-apigateway.kubesphere-system.svc
        wsUrl: ws://ks-apigateway.kubesphere-system.svc

      http:
        hostname: localhost
        port: 8000
        static:
          production:
            /public: server/public
            /assets: dist/assets
            /dist: dist
      redis:
        port: 6379
        host: redis.kubesphere-system.svc
      redisTimeout: 5000
      sessionTimeout: 7200000
    client:
      version:
        kubesphere: v2.1.0
        kubernetes: v1.15.5
        openpitrix: v0.3.5
kind: ConfigMap
metadata:
  namespace: kubesphere-system
  name: ks-console-config
---
apiVersion: v1
data:
  ingress-controller-svc.yaml: |+
    apiVersion: v1
    kind: Service
    metadata:
      name: kubesphere-router-gateway
      labels:
        app: kubesphere
        component: ks-router
        tier: backend
    spec:
      selector:
        app: kubesphere
        component: ks-router
        tier: backend
      type: LoadBalancer
      ports:
        - name: http
          protocol: TCP
          port: 80
          targetPort: 80
        - name: https
          protocol: TCP
          port: 443
          targetPort: 443

  ingress-controller.yaml: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: ks-router
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: kubesphere
          component: ks-router
          tier: backend
      template:
        metadata:
          labels:
            app: kubesphere
            component: ks-router
            tier: backend
          annotations:
            prometheus.io/port: '10254'
            prometheus.io/scrape: 'true'
        spec:
          serviceAccountName: kubesphere-router-serviceaccount
          imagePullSecrets:
          - name: qingcloud
          containers:
            - name: nginx-ingress-controller
              image: dockerhub.qingcloud.com/kubernetes_ingress_controller/nginx-ingress-controller:0.24.1
              args:
                - /nginx-ingress-controller
                - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
                - --configmap=$(POD_NAMESPACE)/nginx-configuration
                - --annotations-prefix=nginx.ingress.kubernetes.io
                - --force-namespace-isolation
                - --update-status
                - --update-status-on-shutdown
              env:
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
              ports:
              - name: http
                containerPort: 80
              - name: https
                containerPort: 443
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /healthz
                  port: 10254
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /healthz
                  port: 10254
                  scheme: HTTP
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              securityContext:
                runAsNonRoot: false
kind: ConfigMap
metadata:
  namespace: kubesphere-system
  name: ks-router-config
---
apiVersion: v1
data:
  kubesphere.yaml: |
    kubernetes:
      kubeconfig: ""
      master: https://192.168.0.14:6443
      qps: 1e+06
      burst: 1000000
    ldap:
      host: openldap.kubesphere-system.svc:389
      managerDN: cn=admin,dc=kubesphere,dc=io
      managerPassword: admin
      userSearchBase: ou=Users,dc=kubesphere,dc=io
      groupSearchBase: ou=Groups,dc=kubesphere,dc=io
    redis:
      host: redis.kubesphere-system.svc
      port: 6379
      password: ""
      db: 0
    monitoring:
      endpoint: http://prometheus-k8s.kubesphere-monitoring-system.svc:9090
      secondaryEndpoint: http://prometheus-k8s-system.kubesphere-monitoring-system.svc:9090
kind: ConfigMap
metadata:
  name: kubesphere-config
  namespace: kubesphere-system
---
apiVersion: v1
data:
  clusterrules.json: |
    [
      {
        "name": "projects",
        "actions": [
          {
            "name": "manage",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list",
                  "patch",
                  "update"
                ],
                "apiGroups": [
                  "",
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "namespaces"
                ]
              },
              {
                "verbs": [
                  "list"
                ],
                "apiGroups": [
                  "iam.kubesphere.io"
                ],
                "resources": [
                  "users"
                ]
              },
              {
                "verbs": [
                  "list"
                ],
                "apiGroups": [
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "workspaces"
                ]
              },
              {
                "verbs": [
                  "get"
                ],
                "apiGroups": [
                  "iam.kubesphere.io"
                ],
                "resources": [
                  "workspaces/members"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "workspaces",
        "actions": [
          {
            "name": "manage",
            "rules": [
              {
                "verbs": [
                  "*"
                ],
                "apiGroups": [
                  "*"
                ],
                "resources": [
                  "workspaces",
                  "workspaces/*"
                ]
              },
              {
                "verbs": [
                  "list"
                ],
                "apiGroups": [
                  "iam.kubesphere.io"
                ],
                "resources": [
                  "users"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "monitoring",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "monitoring.kubesphere.io",
                  "monitoring.coreos.com"
                ],
                "resources": [
                  "*"
                ]
              },
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "",
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "componenthealth",
                  "components",
                  "nodes",
                  "events",
                  "pods"
                ]
              },
              {
                "verbs": [
                  "get"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "namespaces"
                ]
              },
              {
                "verbs": [
                  "list"
                ],
                "apiGroups": [
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "pods"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "alerting",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "alerting.kubesphere.io"
                ],
                "resources": [
                  "*"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  "alerting.kubesphere.io"
                ],
                "resources": [
                  "*"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list",
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  "alerting.kubesphere.io"
                ],
                "resources": [
                  "*"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  "alerting.kubesphere.io"
                ],
                "resources": [
                  "*"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "logging",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "logging.kubesphere.io"
                ],
                "resources": [
                  "*"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "accounts",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "watch",
                  "list"
                ],
                "apiGroups": [
                  "iam.kubesphere.io"
                ],
                "resources": [
                  "users",
                  "users/*"
                ]
              },
              {
                "verbs": [
                  "get"
                ],
                "apiGroups": [
                  "iam.kubesphere.io"
                ],
                "resources": [
                  "rulesmapping"
                ],
                "resourceNames": [
                  "*"
                ]
              },
              {
                "verbs": [
                  "get",
                  "watch",
                  "list"
                ],
                "apiGroups": [
                  "rbac.authorization.k8s.io"
                ],
                "resources": [
                  "clusterrolebindings"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "list"
                ],
                "apiGroups": [
                  "iam.kubesphere.io",
                  "rbac.authorization.k8s.io"
                ],
                "resources": [
                  "clusterroles"
                ]
              },
              {
                "verbs": [
                  "get",
                  "watch",
                  "list",
                  "create"
                ],
                "apiGroups": [
                  "iam.kubesphere.io"
                ],
                "resources": [
                  "users"
                ]
              },
              {
                "verbs": [
                  "get"
                ],
                "apiGroups": [
                  "iam.kubesphere.io"
                ],
                "resources": [
                  "rulesmapping"
                ],
                "resourceNames": [
                  "*"
                ]
              },
              {
                "verbs": [
                  "create",
                  "delete",
                  "deletecollection"
                ],
                "apiGroups": [
                  "rbac.authorization.k8s.io"
                ],
                "resources": [
                  "clusterrolebindings"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  "iam.kubesphere.io"
                ],
                "resources": [
                  "users"
                ]
              },
              {
                "verbs": [
                  "list"
                ],
                "apiGroups": [
                  "iam.kubesphere.io",
                  "rbac.authorization.k8s.io"
                ],
                "resources": [
                  "clusterroles"
                ]
              },
              {
                "verbs": [
                  "create",
                  "delete",
                  "deletecollection"
                ],
                "apiGroups": [
                  "rbac.authorization.k8s.io"
                ],
                "resources": [
                  "clusterrolebindings"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete",
                  "deletecollection"
                ],
                "apiGroups": [
                  "iam.kubesphere.io"
                ],
                "resources": [
                  "users"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "roles",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "watch",
                  "list"
                ],
                "apiGroups": [
                  "rbac.authorization.k8s.io"
                ],
                "resources": [
                  "clusterroles"
                ]
              },
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "iam.kubesphere.io"
                ],
                "resources": [
                  "clusterroles",
                  "clusterroles/*"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  "rbac.authorization.k8s.io"
                ],
                "resources": [
                  "clusterroles"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  "rbac.authorization.k8s.io"
                ],
                "resources": [
                  "clusterroles"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete",
                  "deletecollection"
                ],
                "apiGroups": [
                  "rbac.authorization.k8s.io"
                ],
                "resources": [
                  "clusterroles"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "storageclasses",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "watch",
                  "list"
                ],
                "apiGroups": [
                  "",
                  "storage.k8s.io",
                  "resources.kubesphere.io",
                  "metrics.kubesphere.io"
                ],
                "resources": [
                  "pods",
                  "persistentvolumeclaims",
                  "storageclasses",
                  "storageclasses/*"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  "storage.k8s.io"
                ],
                "resources": [
                  "storageclasses"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  "storage.k8s.io"
                ],
                "resources": [
                  "storageclasses"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete",
                  "deletecollection"
                ],
                "apiGroups": [
                  "storage.k8s.io"
                ],
                "resources": [
                  "storageclasses"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "nodes",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "watch",
                  "list"
                ],
                "apiGroups": [
                  "",
                  "resources.kubesphere.io",
                  "monitoring.kubesphere.io"
                ],
                "resources": [
                  "pods",
                  "nodes",
                  "nodes/*",
                  "events"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "nodes"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "apps",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "openpitrix.io"
                ],
                "resources": [
                  "applications",
                  "apps",
                  "apps/versions",
                  "apps/events",
                  "categories",
                  "attachments"
                ]
              }
            ]
          },
          {
            "name": "manage",
            "rules": [
              {
                "verbs": [
                  "*"
                ],
                "apiGroups": [
                  "openpitrix.io"
                ],
                "resources": [
                  "*"
                ]
              }
            ]
          }
        ]
      }
    ]
  rules.json: |
    [
      {
        "name": "projects",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list",
                  "watch"
                ],
                "apiGroups": [
                  "*"
                ],
                "resources": [
                  "namespaces",
                  "limitranges",
                  "resourcequotas",
                  "serviceaccounts",
                  "quotas",
                  "abnormalworkloads",
                  "workloads"
                ]
              },
              {
                "verbs": [
                  "list"
                ],
                "apiGroups": [
                  "*"
                ],
                "resources": [
                  "users",
                  "roles"
                ]
              },
              {
                "verbs": [
                  "list",
                  "get"
                ],
                "apiGroups": [
                  "*"
                ],
                "resources": [
                  "events"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "namespaces",
                  "limitranges"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "namespaces",
                  "limitranges"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "monitoring",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "monitoring.kubesphere.io"
                ],
                "resources": [
                  "*"
                ]
              },
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "health"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "alerting",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "alerting.kubesphere.io"
                ],
                "resources": [
                  "*"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  "alerting.kubesphere.io"
                ],
                "resources": [
                  "*"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  "alerting.kubesphere.io"
                ],
                "resources": [
                  "*"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "members",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "rbac.authorization.k8s.io",
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "rolebindings"
                ]
              },
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "iam.kubesphere.io"
                ],
                "resources": [
                  "users"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  "rbac.authorization.k8s.io"
                ],
                "resources": [
                  "rolebindings"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "get",
                  "watch",
                  "list",
                  "create",
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  "rbac.authorization.k8s.io"
                ],
                "resources": [
                  "rolebindings"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  "rbac.authorization.k8s.io"
                ],
                "resources": [
                  "rolebindings"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "roles",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "rbac.authorization.k8s.io",
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "roles"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  "rbac.authorization.k8s.io"
                ],
                "resources": [
                  "roles"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "patch",
                  "update"
                ],
                "apiGroups": [
                  "rbac.authorization.k8s.io"
                ],
                "resources": [
                  "roles"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  "rbac.authorization.k8s.io"
                ],
                "resources": [
                  "roles"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "deployments",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "apps",
                  "extensions",
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "deployments",
                  "deployments/scale"
                ]
              },
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "pods",
                  "pods/*"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  "apps",
                  "extensions"
                ],
                "resources": [
                  "deployments"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  "apps",
                  "extensions"
                ],
                "resources": [
                  "deployments",
                  "deployments/*"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  "apps",
                  "extensions"
                ],
                "resources": [
                  "deployments"
                ]
              }
            ]
          },
          {
            "name": "scale",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  "apps",
                  "extensions"
                ],
                "resources": [
                  "deployments/scale"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "statefulsets",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "apps",
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "statefulsets"
                ]
              },
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "pods",
                  "pods/*"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  "apps"
                ],
                "resources": [
                  "statefulsets"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  "apps"
                ],
                "resources": [
                  "statefulsets"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  "apps"
                ],
                "resources": [
                  "statefulsets"
                ]
              }
            ]
          },
          {
            "name": "scale",
            "rules": [
              {
                "verbs": [
                  "patch"
                ],
                "apiGroups": [
                  "apps"
                ],
                "resources": [
                  "statefulsets"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "daemonsets",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "apps",
                  "extensions",
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "daemonsets"
                ]
              },
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "pods",
                  "pods/*"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  "apps",
                  "extensions"
                ],
                "resources": [
                  "daemonsets"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  "apps",
                  "extensions"
                ],
                "resources": [
                  "daemonsets"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  "apps",
                  "extensions"
                ],
                "resources": [
                  "daemonsets"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "pods",
        "actions": [
          {
            "name": "terminal",
            "rules": [
              {
                "verbs": [
                  "get"
                ],
                "apiGroups": [
                  "terminal.kubesphere.io"
                ],
                "resources": [
                  "pods"
                ]
              }
            ]
          },
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "pods"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "pods"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "services",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "list",
                  "get"
                ],
                "apiGroups": [
                  "",
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "services"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "services"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "services"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "services"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "advanced",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "router"
                ]
              }
            ]
          },
          {
            "name": "manage",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list",
                  "create",
                  "update",
                  "patch",
                  "delete"
                ],
                "apiGroups": [
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "router"
                ]
              },
              {
                "verbs": [
                  "patch",
                  "update"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "namespaces"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "s2ibuilders",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "devops.kubesphere.io",
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "s2ibuilders",
                  "s2iruns"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  "devops.kubesphere.io"
                ],
                "resources": [
                  "s2ibuilders",
                  "s2iruns"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  "devops.kubesphere.io"
                ],
                "resources": [
                  "s2ibuilders",
                  "s2iruns"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  "devops.kubesphere.io"
                ],
                "resources": [
                  "s2ibuilders",
                  "s2iruns"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "routes",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "extensions",
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "ingresses"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  "extensions"
                ],
                "resources": [
                  "ingresses"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  "extensions"
                ],
                "resources": [
                  "ingresses"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  "extensions"
                ],
                "resources": [
                  "ingresses"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "volumes",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "",
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "persistentvolumeclaims"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "persistentvolumeclaims"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "persistentvolumeclaims"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "persistentvolumeclaims"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "applications",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list",
                  "watch"
                ],
                "apiGroups": [
                  "app.k8s.io",
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "applications"
                ]
              },
              {
                "verbs": [
                  "get",
                  "list",
                  "watch"
                ],
                "apiGroups": [
                  "servicemesh.kubesphere.io"
                ],
                "resources": [
                  "*"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  "app.k8s.io"
                ],
                "resources": [
                  "applications"
                ]
              },
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  "servicemesh.kubesphere.io"
                ],
                "resources": [
                  "*"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "create",
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  "app.k8s.io"
                ],
                "resources": [
                  "applications"
                ]
              },
              {
                "verbs": [
                  "create",
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  "servicemesh.kubesphere.io"
                ],
                "resources": [
                  "*"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  "app.k8s.io"
                ],
                "resources": [
                  "applications"
                ]
              },
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  "servicemesh.kubesphere.io"
                ],
                "resources": [
                  "*"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "jobs",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "batch",
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "jobs"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  "batch"
                ],
                "resources": [
                  "jobs"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  "batch"
                ],
                "resources": [
                  "jobs"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  "batch"
                ],
                "resources": [
                  "jobs"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "cronjobs",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "batch",
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "cronjobs"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  "batch"
                ],
                "resources": [
                  "cronjobs"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  "batch"
                ],
                "resources": [
                  "cronjobs"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  "batch"
                ],
                "resources": [
                  "cronjobs"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "secrets",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "",
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "secrets"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "secrets"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "secrets"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "secrets"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "configmaps",
        "actions": [
          {
            "name": "view",
            "rules": [
              {
                "verbs": [
                  "get",
                  "list"
                ],
                "apiGroups": [
                  "",
                  "resources.kubesphere.io"
                ],
                "resources": [
                  "configmaps"
                ]
              }
            ]
          },
          {
            "name": "create",
            "rules": [
              {
                "verbs": [
                  "create"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "configmaps"
                ]
              }
            ]
          },
          {
            "name": "edit",
            "rules": [
              {
                "verbs": [
                  "update",
                  "patch"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "configmaps"
                ]
              }
            ]
          },
          {
            "name": "delete",
            "rules": [
              {
                "verbs": [
                  "delete"
                ],
                "apiGroups": [
                  ""
                ],
                "resources": [
                  "configmaps"
                ]
              }
            ]
          }
        ]
      }
    ]
kind: ConfigMap
metadata:
  name: policy-rules
  namespace: kubesphere-system
---
apiVersion: v1
data:
  bookinfo.yaml: |
    apiVersion: app.k8s.io/v1beta1
    kind: Application
    metadata:
      name: bookinfo
      namespace: servicemesh
      labels:
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      annotations:
        servicemesh.kubesphere.io/enabled: 'true'
    spec:
      selector:
        matchLabels:
          app.kubernetes.io/version: v1
          app.kubernetes.io/name: bookinfo
      addOwnerRef: true
      descriptor:
        icons:
          - src: '/assets/bookinfo.svg'
      componentKinds:
        - group: ''
          kind: Service
        - group: extensions
          kind: Deployment
        - group: apps
          kind: StatefulSet
        - group: extensions
          kind: Ingress
        - group: servicemesh.kubesphere.io
          kind: Strategy
        - group: servicemesh.kubesphere.io
          kind: ServicePolicy

    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      namespace: servicemesh
      annotations:
        kubesphere.io/isElasticReplicas: 'false'
        servicemesh.kubesphere.io/enabled: 'true'
      labels:
        app: productpage
        version: v1
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      name: productpage-v1
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: productpage
          version: v1
          app.kubernetes.io/version: v1
          app.kubernetes.io/name: bookinfo
      template:
        metadata:
          labels:
            app: productpage
            version: v1
            app.kubernetes.io/version: v1
            app.kubernetes.io/name: bookinfo
          annotations:
            sidecar.istio.io/inject: 'true'
        spec:
          containers:
            - name: productpage
              resources:
                requests:
                  cpu: 10m
                  memory: 10Mi
                limits:
                  cpu: '1'
                  memory: 1000Mi
              imagePullPolicy: IfNotPresent
              image: kubesphere/examples-bookinfo-productpage-v1:1.13.0
              ports:
                - name: http-web
                  protocol: TCP
                  containerPort: 9080
                  servicePort: 9080
          serviceAccount: default
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
    ---
    apiVersion: v1
    kind: Service
    metadata:
      namespace: servicemesh
      labels:
        app: productpage
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      annotations:
        kubesphere.io/workloadType: Deployment
        servicemesh.kubesphere.io/enabled: 'true'
      name: productpage
    spec:
      type: ClusterIP
      sessionAffinity: None
      selector:
        app: productpage
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      ports:
        - name: http-web
          protocol: TCP
          port: 9080
          targetPort: 9080

    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      namespace: servicemesh
      annotations:
        kubesphere.io/isElasticReplicas: 'false'
        servicemesh.kubesphere.io/enabled: 'true'
      labels:
        app: reviews
        version: v1
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      name: reviews-v1
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: reviews
          version: v1
          app.kubernetes.io/version: v1
          app.kubernetes.io/name: bookinfo
      template:
        metadata:
          labels:
            app: reviews
            version: v1
            app.kubernetes.io/version: v1
            app.kubernetes.io/name: bookinfo
          annotations:
            sidecar.istio.io/inject: 'true'
        spec:
          containers:
            - name: reviews
              resources:
                requests:
                  cpu: 10m
                  memory: 10Mi
                limits:
                  cpu: '1'
                  memory: 1000Mi
              imagePullPolicy: IfNotPresent
              image: kubesphere/examples-bookinfo-reviews-v1:1.13.0
              ports:
                - name: http-web
                  protocol: TCP
                  containerPort: 9080
                  servicePort: 9080
          serviceAccount: default
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
    ---
    apiVersion: v1
    kind: Service
    metadata:
      namespace: servicemesh
      labels:
        app: reviews
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      annotations:
        kubesphere.io/workloadType: Deployment
        servicemesh.kubesphere.io/enabled: 'true'
      name: reviews
    spec:
      type: ClusterIP
      sessionAffinity: None
      selector:
        app: reviews
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      ports:
        - name: http-web
          protocol: TCP
          port: 9080
          targetPort: 9080

    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      namespace: servicemesh
      annotations:
        kubesphere.io/isElasticReplicas: 'false'
        servicemesh.kubesphere.io/enabled: 'true'
      labels:
        app: details
        version: v1
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      name: details-v1
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: details
          version: v1
          app.kubernetes.io/version: v1
          app.kubernetes.io/name: bookinfo
      template:
        metadata:
          labels:
            app: details
            version: v1
            app.kubernetes.io/version: v1
            app.kubernetes.io/name: bookinfo
          annotations:
            sidecar.istio.io/inject: 'true'
        spec:
          containers:
            - name: details
              resources:
                requests:
                  cpu: 10m
                  memory: 10Mi
                limits:
                  cpu: '1'
                  memory: 1000Mi
              imagePullPolicy: IfNotPresent
              image: kubesphere/examples-bookinfo-details-v1:1.13.0
              ports:
                - name: http-web
                  protocol: TCP
                  containerPort: 9080
                  servicePort: 9080
          serviceAccount: default
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
    ---
    apiVersion: v1
    kind: Service
    metadata:
      namespace: servicemesh
      labels:
        app: details
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      annotations:
        kubesphere.io/workloadType: Deployment
        servicemesh.kubesphere.io/enabled: 'true'
      name: details
    spec:
      type: ClusterIP
      sessionAffinity: None
      selector:
        app: details
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      ports:
        - name: http-web
          protocol: TCP
          port: 9080
          targetPort: 9080

    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      namespace: servicemesh
      annotations:
        kubesphere.io/isElasticReplicas: 'false'
        servicemesh.kubesphere.io/enabled: 'true'
      labels:
        app: ratings
        version: v1
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      name: ratings-v1
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: ratings
          version: v1
          app.kubernetes.io/version: v1
          app.kubernetes.io/name: bookinfo
      template:
        metadata:
          labels:
            app: ratings
            version: v1
            app.kubernetes.io/version: v1
            app.kubernetes.io/name: bookinfo
          annotations:
            sidecar.istio.io/inject: 'true'
        spec:
          containers:
            - name: ratings
              resources:
                requests:
                  cpu: 10m
                  memory: 10Mi
                limits:
                  cpu: '1'
                  memory: 1000Mi
              imagePullPolicy: IfNotPresent
              image: kubesphere/examples-bookinfo-ratings-v1:1.13.0
              ports:
                - name: http-web
                  protocol: TCP
                  containerPort: 9080
                  servicePort: 9080
          serviceAccount: default
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
    ---
    apiVersion: v1
    kind: Service
    metadata:
      namespace: servicemesh
      labels:
        app: ratings
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      annotations:
        kubesphere.io/workloadType: Deployment
        servicemesh.kubesphere.io/enabled: 'true'
      name: ratings
    spec:
      type: ClusterIP
      sessionAffinity: None
      selector:
        app: ratings
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      ports:
        - name: http-web
          protocol: TCP
          port: 9080
          targetPort: 9080

    ---
    apiVersion: apps/v1
    kind: Ingress
    metadata:
      namespace: servicemesh
      labels:
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      name: bookinfo-ingress
    spec:
      rules:
        - http:
            paths:
              - path: /
                backend:
                  serviceName: productpage
                  servicePort: 9080
          host: productpage.servicemesh.139.198.121.92.nip.io
kind: ConfigMap
metadata:
  name: sample-bookinfo
  namespace: kubesphere-system
---

# Clusterroles
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ks-controller-manager
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - namespaces/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - tenant.kubesphere.io
  resources:
  - workspaces
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - tenant.kubesphere.io
  resources:
  - workspaces/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - networking.istio.io
  resources:
  - virtualservices
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - networking.istio.io
  resources:
  - destinationrules
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - servicemesh.kubesphere.io
  resources:
  - servicepolicies
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - servicemesh.kubesphere.io
  resources:
  - strategies
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - deployments/status
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterroles
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - app.k8s.io
  resources:
  - apps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-state-metrics
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  - nodes
  - pods
  - services
  - resourcequotas
  - replicationcontrollers
  - limitranges
  - persistentvolumeclaims
  - persistentvolumes
  - namespaces
  - endpoints
  verbs:
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - deployments
  - replicasets
  - ingresses
  verbs:
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  - daemonsets
  - deployments
  - replicasets
  verbs:
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs:
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - list
  - watch
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: node-exporter
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-operator
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - '*'
- apiGroups:
  - monitoring.coreos.com
  resources:
  - alertmanagers
  - prometheuses
  - prometheuses/finalizers
  - alertmanagers/finalizers
  - servicemonitors
  - prometheusrules
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - delete
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  verbs:
  - get
  - create
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    kubernetes.io/created-by: kubesphere.io/ks-router
  name: kubesphere-router
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - secrets
  - namespaces
  verbs:
  - list
  - watch
  - get
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - extensions
  resources:
  - ingresses/status
  verbs:
  - update
---
# Serviceaccounts
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    kubernetes.io/created-by: kubesphere.io/kubectl
  creationTimestamp: "2019-11-09T10:41:12Z"
  name: kubesphere-cluster-admin
  namespace: kubesphere-controls-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    kubernetes.io/created-by: kubesphere.io/ks-router
  name: kubesphere-router
  namespace: kubesphere-controls-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ks-controller-manager
  namespace: kubesphere-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubesphere
  namespace: kubesphere-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-state-metrics
  namespace: kubesphere-monitoring-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: node-exporter
  namespace: kubesphere-monitoring-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-operator
  namespace: kubesphere-monitoring-system
---
# Roles
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kube-state-metrics
  namespace: kubesphere-monitoring-system
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
- apiGroups:
  - extensions
  resourceNames:
  - kube-state-metrics
  resources:
  - deployments
  verbs:
  - get
  - update
- apiGroups:
  - apps
  resourceNames:
  - kube-state-metrics
  resources:
  - deployments
  verbs:
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    kubesphere.io/creator: system
    kubesphere.io/description: The maintainer of the namespace who can manage resources
      other than users and roles in the namespace.
  name: operator
  namespace: kubesphere-monitoring-system
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  - extensions
  - batch
  - logging.kubesphere.io
  - monitoring.kubesphere.io
  - iam.kubesphere.io
  - autoscaling
  - alerting.kubesphere.io
  - openpitrix.io
  - app.k8s.io
  - servicemesh.kubesphere.io
  - operations.kubesphere.io
  - devops.kubesphere.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - ""
  - resources.kubesphere.io
  resources:
  - jobs
  - cronjobs
  - daemonsets
  - deployments
  - horizontalpodautoscalers
  - ingresses
  - endpoints
  - configmaps
  - events
  - persistentvolumeclaims
  - pods
  - podtemplates
  - pods
  - secrets
  - services
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: prometheus-k8s-config
  namespace: kubesphere-monitoring-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    kubernetes.io/created-by: kubesphere.io/ks-router
  name: kubesphere-router
  namespace: kubesphere-controls-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - pods
  - secrets
  - namespaces
  verbs:
  - get
- apiGroups:
  - ""
  resourceNames:
  - ingress-controller-leader-nginx
  resources:
  - configmaps
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
---

# ClusterRoleBindings
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ks-controller-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ks-controller-manager
subjects:
- kind: ServiceAccount
  name: ks-controller-manager
  namespace: kubesphere-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-state-metrics
subjects:
- kind: ServiceAccount
  name: kube-state-metrics
  namespace: kubesphere-monitoring-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubesphere
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: kubesphere
  namespace: kubesphere-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: node-exporter
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: node-exporter
subjects:
- kind: ServiceAccount
  name: node-exporter
  namespace: kubesphere-monitoring-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-operator
subjects:
- kind: ServiceAccount
  name: prometheus-operator
  namespace: kubesphere-monitoring-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:kubesphere-cluster-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: kubesphere-cluster-admin
  namespace: kubesphere-controls-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    kubernetes.io/created-by: kubesphere.io/ks-router
  name: kubesphere-router
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubesphere-router
subjects:
- kind: ServiceAccount
  name: kubesphere-router
  namespace: kubesphere-controls-system
---

# Rolebindings
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kube-state-metrics
  namespace: kubesphere-monitoring-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kube-state-metrics
subjects:
- kind: ServiceAccount
  name: kube-state-metrics
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prometheus-k8s-config
  namespace: kubesphere-monitoring-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prometheus-k8s-config
subjects:
- kind: ServiceAccount
  name: prometheus-k8s
  namespace: kubesphere-monitoring-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    kubernetes.io/created-by: kubesphere.io/ks-router
  name: kubesphere-router
  namespace: kubesphere-controls-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubesphere-router
subjects:
- kind: ServiceAccount
  name: kubesphere-router
  namespace: kubesphere-controls-system
---
# Secrets
---
apiVersion: v1
data:
  prometheus-additional.yaml: ICAgIC0gam9iX25hbWU6ICdpc3Rpby1tZXNoJwogICAgICBzY3JhcGVfaW50ZXJ2YWw6IDE1cwogICAgICBrdWJlcm5ldGVzX3NkX2NvbmZpZ3M6CiAgICAgIC0gcm9sZTogZW5kcG9pbnRzCiAgICAgICAgbmFtZXNwYWNlczoKICAgICAgICAgIG5hbWVzOgogICAgICAgICAgLSBpc3Rpby1zeXN0ZW0KICAgICAgcmVsYWJlbF9jb25maWdzOgogICAgICAtIHNvdXJjZV9sYWJlbHM6IFtfX21ldGFfa3ViZXJuZXRlc19zZXJ2aWNlX25hbWUsIF9fbWV0YV9rdWJlcm5ldGVzX2VuZHBvaW50X3BvcnRfbmFtZV0KICAgICAgICBhY3Rpb246IGtlZXAKICAgICAgICByZWdleDogaXN0aW8tdGVsZW1ldHJ5O3Byb21ldGhldXMKICAgIC0gam9iX25hbWU6ICdpc3Rpby1lbnZveScKICAgICAgc2NyYXBlX2ludGVydmFsOiAxNXMKICAgICAga3ViZXJuZXRlc19zZF9jb25maWdzOgogICAgICAtIHJvbGU6IGVuZHBvaW50cwogICAgICAgIG5hbWVzcGFjZXM6CiAgICAgICAgICBuYW1lczoKICAgICAgICAgIC0gaXN0aW8tc3lzdGVtCiAgICAgIHJlbGFiZWxfY29uZmlnczoKICAgICAgLSBzb3VyY2VfbGFiZWxzOiBbX19tZXRhX2t1YmVybmV0ZXNfc2VydmljZV9uYW1lLCBfX21ldGFfa3ViZXJuZXRlc19lbmRwb2ludF9wb3J0X25hbWVdCiAgICAgICAgYWN0aW9uOiBrZWVwCiAgICAgICAgcmVnZXg6IGlzdGlvLXN0YXRzZC1wcm9tLWJyaWRnZTtzdGF0c2QtcHJvbQogICAgLSBqb2JfbmFtZTogJ2lzdGlvLXBvbGljeScKICAgICAgc2NyYXBlX2ludGVydmFsOiAxNXMKICAgICAga3ViZXJuZXRlc19zZF9jb25maWdzOgogICAgICAtIHJvbGU6IGVuZHBvaW50cwogICAgICAgIG5hbWVzcGFjZXM6CiAgICAgICAgICBuYW1lczoKICAgICAgICAgIC0gaXN0aW8tc3lzdGVtCiAgICAgIHJlbGFiZWxfY29uZmlnczoKICAgICAgLSBzb3VyY2VfbGFiZWxzOiBbX19tZXRhX2t1YmVybmV0ZXNfc2VydmljZV9uYW1lLCBfX21ldGFfa3ViZXJuZXRlc19lbmRwb2ludF9wb3J0X25hbWVdCiAgICAgICAgYWN0aW9uOiBrZWVwCiAgICAgICAgcmVnZXg6IGlzdGlvLXBvbGljeTtodHRwLW1vbml0b3JpbmcKICAgIC0gam9iX25hbWU6ICdpc3Rpby10ZWxlbWV0cnknCiAgICAgIHNjcmFwZV9pbnRlcnZhbDogMTVzCiAgICAgIGt1YmVybmV0ZXNfc2RfY29uZmlnczoKICAgICAgLSByb2xlOiBlbmRwb2ludHMKICAgICAgICBuYW1lc3BhY2VzOgogICAgICAgICAgbmFtZXM6CiAgICAgICAgICAtIGlzdGlvLXN5c3RlbQogICAgICByZWxhYmVsX2NvbmZpZ3M6CiAgICAgIC0gc291cmNlX2xhYmVsczogW19fbWV0YV9rdWJlcm5ldGVzX3NlcnZpY2VfbmFtZSwgX19tZXRhX2t1YmVybmV0ZXNfZW5kcG9pbnRfcG9ydF9uYW1lXQogICAgICAgIGFjdGlvbjoga2VlcAogICAgICAgIHJlZ2V4OiBpc3Rpby10ZWxlbWV0cnk7aHR0cC1tb25pdG9yaW5nCiAgICAtIGpvYl9uYW1lOiAnaXN0aW8tcGlsb3QnCiAgICAgIHNjcmFwZV9pbnRlcnZhbDogMTVzCiAgICAgIGt1YmVybmV0ZXNfc2RfY29uZmlnczoKICAgICAgLSByb2xlOiBlbmRwb2ludHMKICAgICAgICBuYW1lc3BhY2VzOgogICAgICAgICAgbmFtZXM6CiAgICAgICAgICAtIGlzdGlvLXN5c3RlbQogICAgICByZWxhYmVsX2NvbmZpZ3M6CiAgICAgIC0gc291cmNlX2xhYmVsczogW19fbWV0YV9rdWJlcm5ldGVzX3NlcnZpY2VfbmFtZSwgX19tZXRhX2t1YmVybmV0ZXNfZW5kcG9pbnRfcG9ydF9uYW1lXQogICAgICAgIGFjdGlvbjoga2VlcAogICAgICAgIHJlZ2V4OiBpc3Rpby1waWxvdDtodHRwLW1vbml0b3JpbmcKICAgIC0gam9iX25hbWU6ICdpc3Rpby1nYWxsZXknCiAgICAgIHNjcmFwZV9pbnRlcnZhbDogMTVzCiAgICAgIGt1YmVybmV0ZXNfc2RfY29uZmlnczoKICAgICAgLSByb2xlOiBlbmRwb2ludHMKICAgICAgICBuYW1lc3BhY2VzOgogICAgICAgICAgbmFtZXM6CiAgICAgICAgICAtIGlzdGlvLXN5c3RlbQogICAgICByZWxhYmVsX2NvbmZpZ3M6CiAgICAgIC0gc291cmNlX2xhYmVsczogW19fbWV0YV9rdWJlcm5ldGVzX3NlcnZpY2VfbmFtZSwgX19tZXRhX2t1YmVybmV0ZXNfZW5kcG9pbnRfcG9ydF9uYW1lXQogICAgICAgIGFjdGlvbjoga2VlcAogICAgICAgIHJlZ2V4OiBpc3Rpby1nYWxsZXk7aHR0cC1tb25pdG9yaW5n
kind: Secret
metadata:
  name: additional-scrape-configs
  namespace: kubesphere-monitoring-system
type: Opaque
---
apiVersion: v1
data:
  admin-password: UEA4OHcwcmQK
  jwt-secret: d3VIbnFWeklNbm1xdlJ3TnVIYks0cmhrZEZrb21zcUowQ25Vc3lTTHY0SmFDQzVnQTk1VnBMZWlwZGQyaDZzS1RYUmJZOEFsaFNncUp3TkFjZG91aUlKWDNxQ3NXd3hwbDZq
kind: Secret
metadata:
  name: ks-account-secret
  namespace: kubesphere-system
type: Opaque
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    k8s-app: coredns
  name: coredns
  namespace: kubesphere-monitoring-system
spec:
  endpoints:
  - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    interval: 1m
    port: metrics
  jobLabel: k8s-app
  namespaceSelector:
    matchNames:
    - kube-system
  selector:
    matchLabels:
      k8s-app: coredns
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    k8s-app: apiserver
  name: kube-apiserver
  namespace: kubesphere-monitoring-system
spec:
  endpoints:
  - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    interval: 1m
    metricRelabelings:
    - action: drop
      regex: etcd_(debugging|disk|request|server).*
      sourceLabels:
      - __name__
    - action: drop
      regex: apiserver_admission_controller_admission_latencies_seconds_.*
      sourceLabels:
      - __name__
    - action: drop
      regex: apiserver_admission_step_admission_latencies_seconds_.*
      sourceLabels:
      - __name__
    port: https
    scheme: https
    tlsConfig:
      caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      serverName: kubernetes
  jobLabel: component
  namespaceSelector:
    matchNames:
    - default
  selector:
    matchLabels:
      component: apiserver
      provider: kubernetes
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    k8s-app: kube-controller-manager
  name: kube-controller-manager
  namespace: kubesphere-monitoring-system
spec:
  endpoints:
  - interval: 1m
    metricRelabelings:
    - action: keep
      regex: up
      sourceLabels:
      - __name__
    port: http-metrics
  jobLabel: k8s-app
  namespaceSelector:
    matchNames:
    - kube-system
  selector:
    matchLabels:
      k8s-app: kube-controller-manager
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    k8s-app: kube-scheduler
  name: kube-scheduler
  namespace: kubesphere-monitoring-system
spec:
  endpoints:
  - interval: 1m
    port: http-metrics
  jobLabel: k8s-app
  namespaceSelector:
    matchNames:
    - kube-system
  selector:
    matchLabels:
      k8s-app: kube-scheduler
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    k8s-app: kube-state-metrics
  name: kube-state-metrics
  namespace: kubesphere-monitoring-system
spec:
  endpoints:
  - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    honorLabels: true
    interval: 1m
    metricRelabelings:
    - action: drop
      regex: kube_pod_container_status_.*terminated_reason
      sourceLabels:
      - __name__
    port: https-main
    scheme: https
    scrapeTimeout: 30s
    tlsConfig:
      insecureSkipVerify: true
  - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    interval: 1m
    port: https-self
    scheme: https
    tlsConfig:
      insecureSkipVerify: true
  jobLabel: k8s-app
  selector:
    matchLabels:
      k8s-app: kube-state-metrics
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    k8s-app: kubelet
  name: kubelet
  namespace: kubesphere-monitoring-system
spec:
  endpoints:
  - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    honorLabels: true
    interval: 1m
    metricRelabelings:
    - action: keep
      regex: kubelet_running_container_count|kubelet_running_pod_count|kubelet_volume_stats.*
      sourceLabels:
      - __name__
    port: https-metrics
    scheme: https
    tlsConfig:
      insecureSkipVerify: true
  - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    honorLabels: true
    interval: 1m
    metricRelabelings:
    - action: drop
      regex: container_([a-z_]+);
      sourceLabels:
      - __name__
      - image
    - action: keep
      regex: container_cpu_usage_seconds_total|container_memory_usage_bytes|container_memory_cache|container_network_.+_bytes_total|container_memory_working_set_bytes
      sourceLabels:
      - __name__
    path: /metrics/cadvisor
    port: https-metrics
    scheme: https
    tlsConfig:
      insecureSkipVerify: true
  jobLabel: k8s-app
  namespaceSelector:
    matchNames:
    - kube-system
  selector:
    matchLabels:
      k8s-app: kubelet
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    k8s-app: node-exporter
  name: node-exporter
  namespace: kubesphere-monitoring-system
spec:
  endpoints:
  - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    interval: 1m
    metricRelabelings:
    - action: keep
      regex: node_cpu_.+|node_memory_Mem.+_bytes|node_memory_SReclaimable_bytes|node_memory_Cached_bytes|node_memory_Buffers_bytes|node_network_.+_bytes_total|node_disk_.+_completed_total|node_disk_.+_bytes_total|node_filesystem_files|node_filesystem_files_free|node_filesystem_avail_bytes|node_filesystem_size_bytes|node_filesystem_free_bytes|node_load.+
      sourceLabels:
      - __name__
    port: https
    scheme: https
    tlsConfig:
      insecureSkipVerify: true
  jobLabel: k8s-app
  selector:
    matchLabels:
      k8s-app: node-exporter
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    k8s-app: prometheus
  name: prometheus
  namespace: kubesphere-monitoring-system
spec:
  endpoints:
  - interval: 1m
    port: web
  selector:
    matchLabels:
      prometheus: k8s
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    k8s-app: prometheus-system
  name: prometheus-system
  namespace: kubesphere-monitoring-system
spec:
  endpoints:
  - interval: 1m
    port: web
  selector:
    matchLabels:
      prometheus: k8s-system
---
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  labels:
    prometheus: k8s
  name: k8s
  namespace: kubesphere-monitoring-system
spec:
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - preference:
          matchExpressions:
          - key: node-role.kubernetes.io/monitoring
            operator: Exists
        weight: 100
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: prometheus
              operator: In
              values:
              - k8s
          namespaces:
          - kubesphere-monitoring-system
          topologyKey: kubernetes.io/hostname
        weight: 100
  baseImage: kubesphere/prometheus
  imagePullSecrets:
  - name: qingcloud
  nodeSelector:
    beta.kubernetes.io/os: linux
  query:
    maxConcurrency: 1000
  replicas: 1
  resources:
    limits:
      cpu: "2.5"
      memory: 2Gi
    requests:
      cpu: 200m
      memory: 400Mi
  retention: 7d
  ruleSelector:
    matchLabels:
      prometheus: k8s
      role: alert-rules
  scrapeInterval: 1m
  securityContext:
    fsGroup: 0
    runAsNonRoot: false
    runAsUser: 0
  serviceAccountName: prometheus-k8s
  serviceMonitorNamespaceSelector: {}
  serviceMonitorSelector:
    matchExpressions:
    - key: k8s-app
      operator: In
      values:
      - kube-state-metrics
      - node-exporter
      - kubelet
      - prometheus-system
  storage:
    volumeClaimTemplate:
      spec:
        resources:
          requests:
            storage: 20Gi
        storageClassName: local
  tolerations:
  - effect: NoSchedule
    key: dedicated
    operator: Equal
    value: monitoring
  version: v2.5.0
---
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  labels:
    prometheus: k8s-system
  name: k8s-system
  namespace: kubesphere-monitoring-system
spec:
  additionalScrapeConfigs:
    key: prometheus-additional.yaml
    name: additional-scrape-configs
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - preference:
          matchExpressions:
          - key: node-role.kubernetes.io/monitoring
            operator: Exists
        weight: 100
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: prometheus
              operator: In
              values:
              - k8s-system
          namespaces:
          - kubesphere-monitoring-system
          topologyKey: kubernetes.io/hostname
        weight: 100
  baseImage: kubesphere/prometheus
  nodeSelector:
    beta.kubernetes.io/os: linux
  query:
    maxConcurrency: 1000
  replicas: 1
  resources:
    limits:
      cpu: "2.5"
      memory: 2Gi
    requests:
      cpu: 10m
      memory: 400Mi
  retention: 7d
  ruleSelector:
    matchLabels:
      prometheus: k8s
      role: alert-rules
  scrapeInterval: 1m
  securityContext:
    fsGroup: 0
    runAsNonRoot: false
    runAsUser: 0
  serviceAccountName: prometheus-k8s
  serviceMonitorNamespaceSelector: {}
  serviceMonitorSelector:
    matchExpressions:
    - key: k8s-app
      operator: In
      values:
      - coredns
      - kube-apiserver
      - prometheus
      - kube-scheduler
      - kube-controller-manager
  storage:
    volumeClaimTemplate:
      spec:
        resources:
          requests:
            storage: 20Gi
        storageClassName: local
  tolerations:
  - effect: NoSchedule
    key: dedicated
    operator: Equal
    value: monitoring
  version: v2.5.0
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  labels:
    prometheus: k8s
    role: alert-rules
  name: prometheus-k8s-rules
  namespace: kubesphere-monitoring-system
spec:
  groups:
  - name: k8s.rules
    rules:
    - expr: |
        sum((container_cpu_usage_seconds_total{job="kubelet", image!="", container_name!=""} * on(namespace) group_left(label_kubesphere_io_workspace) kube_namespace_labels{job="kube-state-metrics"} - container_cpu_usage_seconds_total{job="kubelet", image!="", container_name!=""} offset 90s * on(namespace) group_left(label_kubesphere_io_workspace) kube_namespace_labels{job="kube-state-metrics"}) / 90) by (namespace, label_kubesphere_io_workspace)
      record: namespace:container_cpu_usage_seconds_total:sum_rate
    - expr: |
        sum(container_memory_usage_bytes{job="kubelet", image!="", container_name!=""} * on(namespace) group_left(label_kubesphere_io_workspace) kube_namespace_labels{job="kube-state-metrics"}) by (namespace, label_kubesphere_io_workspace)
      record: namespace:container_memory_usage_bytes:sum
    - expr: |
        sum((container_memory_usage_bytes{job="kubelet", image!="", container_name!=""} - container_memory_cache{job="kubelet", image!="", container_name!=""}) * on(namespace) group_left(label_kubesphere_io_workspace) kube_namespace_labels{job="kube-state-metrics"}) by (namespace, label_kubesphere_io_workspace)
      record: namespace:container_memory_usage_bytes_wo_cache:sum
  - name: node.rules
    rules:
    - expr: |
        max(label_replace(kube_pod_info{job="kube-state-metrics"}, "pod", "$1", "pod", "(.*)")) by (node, namespace, pod)
      record: 'node_namespace_pod:kube_pod_info:'
    - expr: |
        count by (node) (sum by (node, cpu) (
          node_cpu_seconds_total{job="node-exporter"}
        * on (namespace, pod) group_left(node)
          node_namespace_pod:kube_pod_info:
        ))
      record: node:node_num_cpu:sum
    - expr: |
        avg(irate(node_cpu_seconds_total{job="node-exporter",mode="used"}[5m]))
      record: :node_cpu_utilisation:avg1m
    - expr: |
        avg by (node) (
          irate(node_cpu_seconds_total{job="node-exporter",mode="used"}[5m])
        * on (namespace, pod) group_left(node)
          node_namespace_pod:kube_pod_info:)
      record: node:node_cpu_utilisation:avg1m
    - expr: |
        1 -
        sum(node_memory_MemFree_bytes{job="node-exporter"} + node_memory_Cached_bytes{job="node-exporter"} + node_memory_Buffers_bytes{job="node-exporter"} + node_memory_SReclaimable_bytes{job="node-exporter"})
        /
        sum(node_memory_MemTotal_bytes{job="node-exporter"})
      record: ':node_memory_utilisation:'
    - expr: |
        sum by (node) (
          (node_memory_MemFree_bytes{job="node-exporter"} + node_memory_Cached_bytes{job="node-exporter"} + node_memory_Buffers_bytes{job="node-exporter"} + node_memory_SReclaimable_bytes{job="node-exporter"})
          * on (namespace, pod) group_left(node)
            node_namespace_pod:kube_pod_info:
        )
      record: node:node_memory_bytes_available:sum
    - expr: |
        sum by (node) (
          node_memory_MemTotal_bytes{job="node-exporter"}
          * on (namespace, pod) group_left(node)
            node_namespace_pod:kube_pod_info:
        )
      record: node:node_memory_bytes_total:sum
    - expr: |
        1 - (node:node_memory_bytes_available:sum / node:node_memory_bytes_total:sum)
      record: 'node:node_memory_utilisation:'
    - expr: |
        sum by (node) (
          irate(node_disk_reads_completed_total{job="node-exporter"}[5m])
        * on (namespace, pod) group_left(node)
          node_namespace_pod:kube_pod_info:
        )
      record: node:data_volume_iops_reads:sum
    - expr: |
        sum by (node) (
          irate(node_disk_writes_completed_total{job="node-exporter"}[5m])
        * on (namespace, pod) group_left(node)
          node_namespace_pod:kube_pod_info:
        )
      record: node:data_volume_iops_writes:sum
    - expr: |
        sum by (node) (
          irate(node_disk_read_bytes_total{job="node-exporter"}[5m])
        * on (namespace, pod) group_left(node)
          node_namespace_pod:kube_pod_info:
        )
      record: node:data_volume_throughput_bytes_read:sum
    - expr: |
        sum by (node) (
          irate(node_disk_written_bytes_total{job="node-exporter"}[5m])
        * on (namespace, pod) group_left(node)
          node_namespace_pod:kube_pod_info:
        )
      record: node:data_volume_throughput_bytes_written:sum
    - expr: |
        sum(irate(node_network_receive_bytes_total{job="node-exporter",device!~"^(cali.+|tunl.+|dummy.+|kube.+|flannel.+|cni.+|docker.+|veth.+|lo.*)"}[5m])) +
        sum(irate(node_network_transmit_bytes_total{job="node-exporter",device!~"^(cali.+|tunl.+|dummy.+|kube.+|flannel.+|cni.+|docker.+|veth.+|lo.*)"}[5m]))
      record: :node_net_utilisation:sum_irate
    - expr: |
        sum by (node) (
          (irate(node_network_receive_bytes_total{job="node-exporter",device!~"^(cali.+|tunl.+|dummy.+|kube.+|flannel.+|cni.+|docker.+|veth.+|lo.*)"}[5m]) +
          irate(node_network_transmit_bytes_total{job="node-exporter",device!~"^(cali.+|tunl.+|dummy.+|kube.+|flannel.+|cni.+|docker.+|veth.+|lo.*)"}[5m]))
        * on (namespace, pod) group_left(node)
          node_namespace_pod:kube_pod_info:
        )
      record: node:node_net_utilisation:sum_irate
    - expr: |
        sum by (node) (
          irate(node_network_transmit_bytes_total{job="node-exporter",device!~"^(cali.+|tunl.+|dummy.+|kube.+|flannel.+|cni.+|docker.+|veth.+|lo.*)"}[5m])
        * on (namespace, pod) group_left(node)
          node_namespace_pod:kube_pod_info:
        )
      record: node:node_net_bytes_transmitted:sum_irate
    - expr: |
        sum by (node) (
          irate(node_network_receive_bytes_total{job="node-exporter",device!~"^(cali.+|tunl.+|dummy.+|kube.+|flannel.+|cni.+|docker.+|veth.+|lo.*)"}[5m])
        * on (namespace, pod) group_left(node)
          node_namespace_pod:kube_pod_info:
        )
      record: node:node_net_bytes_received:sum_irate
    - expr: |
        sum by(node) (sum(max(node_filesystem_files{device=~"/dev/.*", device!~"/dev/loop\\d+", job="node-exporter"}) by (device, pod, namespace)) by (pod, namespace) * on (namespace, pod) group_left(node) node_namespace_pod:kube_pod_info:)
      record: 'node:node_inodes_total:'
    - expr: |
        sum by(node) (sum(max(node_filesystem_files_free{device=~"/dev/.*", device!~"/dev/loop\\d+", job="node-exporter"}) by (device, pod, namespace)) by (pod, namespace) * on (namespace, pod) group_left(node) node_namespace_pod:kube_pod_info:)
      record: 'node:node_inodes_free:'
    - expr: |
        sum by (node) (node_load1{job="node-exporter"} * on (namespace, pod) group_left(node) node_namespace_pod:kube_pod_info:) / node:node_num_cpu:sum
      record: node:load1:ratio
    - expr: |
        sum by (node) (node_load5{job="node-exporter"} * on (namespace, pod) group_left(node) node_namespace_pod:kube_pod_info:) / node:node_num_cpu:sum
      record: node:load5:ratio
    - expr: |
        sum by (node) (node_load15{job="node-exporter"} * on (namespace, pod) group_left(node) node_namespace_pod:kube_pod_info:) / node:node_num_cpu:sum
      record: node:load15:ratio
    - expr: |
        sum by (node) ((kube_pod_status_scheduled{job="kube-state-metrics", condition="true"} > 0)  * on (namespace, pod) group_left(node) kube_pod_info{job="kube-state-metrics"} unless on (node) (kube_node_status_condition{job="kube-state-metrics", condition="Ready", status=~"unknown|false"} > 0))
      record: node:pod_count:sum
    - expr: |
        (node:pod_running:count / sum(kube_node_status_capacity_pods) by (node)) unless on (node) (kube_node_status_condition{job="kube-state-metrics", condition="Ready", status=~"unknown|false"} > 0)
      record: node:pod_utilization:ratio
    - expr: |
        count(kube_pod_info{job="kube-state-metrics"} unless on (pod, namespace) (kube_pod_status_phase{job="kube-state-metrics", phase=~"Failed|Pending|Unknown|Succeeded"} > 0))  by (node) unless on (node) (kube_node_status_condition{job="kube-state-metrics", condition="Ready", status=~"unknown|false"} > 0)
      record: node:pod_running:count
    - expr: |
        count(kube_pod_info{job="kube-state-metrics"} unless on (pod, namespace) (kube_pod_status_phase{job="kube-state-metrics", phase=~"Failed|Pending|Unknown|Running"} > 0))  by (node) unless on (node) (kube_node_status_condition{job="kube-state-metrics", condition="Ready",status=~"unknown|false"} > 0)
      record: node:pod_succeeded:count
    - expr: |
        count(kube_pod_info{job="kube-state-metrics", node!=""} unless on (pod, namespace) (kube_pod_status_phase{job="kube-state-metrics", phase="Succeeded"}>0) unless on (pod, namespace) ((kube_pod_status_ready{job="kube-state-metrics", condition="true"}>0) and on (pod, namespace) (kube_pod_status_phase{job="kube-state-metrics", phase="Running"}>0)) unless on (pod, namespace) kube_pod_container_status_waiting_reason{job="kube-state-metrics", reason="ContainerCreating"}>0) by (node)
      record: node:pod_abnormal:count
    - expr: |
        (node:pod_abnormal:count / count(kube_pod_info{job="kube-state-metrics", node!=""} unless on (pod, namespace) kube_pod_status_phase{job="kube-state-metrics", phase="Succeeded"}>0) by (node)) unless on (node) (kube_node_status_condition{job="kube-state-metrics", condition="Ready", status=~"unknown|false"} > 0)
      record: node:pod_abnormal:ratio
    - expr: |
        sum(max(node_filesystem_avail_bytes{device=~"/dev/.*", device!~"/dev/loop\\d+", job="node-exporter"} * on (namespace, pod) group_left(node) node_namespace_pod:kube_pod_info:) by (device, node)) by (node)
      record: 'node:disk_space_available:'
    - expr: |
        1- sum(max(node_filesystem_avail_bytes{device=~"/dev/.*", device!~"/dev/loop\\d+", job="node-exporter"} * on (namespace, pod) group_left(node) node_namespace_pod:kube_pod_info:) by (device, node)) by (node) / sum(max(node_filesystem_size_bytes{device=~"/dev/.*", device!~"/dev/loop\\d+", job="node-exporter"} * on (namespace, pod) group_left(node) node_namespace_pod:kube_pod_info:) by (device, node)) by (node)
      record: node:disk_space_utilization:ratio
    - expr: |
        (1 - (node:node_inodes_free: / node:node_inodes_total:))
      record: node:disk_inode_utilization:ratio
  - name: cluster.rules
    rules:
    - expr: |
        count(kube_pod_info{job="kube-state-metrics"} unless on (pod, namespace) (kube_pod_status_phase{job="kube-state-metrics", phase="Succeeded"}>0) unless on (pod, namespace) ((kube_pod_status_ready{job="kube-state-metrics", condition="true"}>0) and on (pod, namespace) (kube_pod_status_phase{job="kube-state-metrics", phase="Running"}>0)) unless on (pod, namespace) kube_pod_container_status_waiting_reason{job="kube-state-metrics", reason="ContainerCreating"}>0)
      record: cluster:pod_abnormal:sum
    - expr: |
        sum((kube_pod_status_scheduled{job="kube-state-metrics", condition="true"} > 0)  * on (namespace, pod) group_left(node) (sum by (node, namespace, pod) (kube_pod_info)) unless on (node) (kube_node_status_condition{job="kube-state-metrics", condition="Ready",status=~"unknown|false"} > 0))
      record: cluster:pod:sum
    - expr: |
        cluster:pod_abnormal:sum / sum(kube_pod_status_phase{job="kube-state-metrics", phase!="Succeeded"})
      record: cluster:pod_abnormal:ratio
    - expr: |
        count(kube_pod_info{job="kube-state-metrics"} and on (pod, namespace) (kube_pod_status_phase{job="kube-state-metrics", phase="Running"}>0) unless on (node) (kube_node_status_condition{job="kube-state-metrics", condition="Ready", status=~"unknown|false"} > 0))
      record: cluster:pod_running:count
    - expr: |
        cluster:pod_running:count / sum(kube_node_status_capacity_pods unless on (node) (kube_node_status_condition{job="kube-state-metrics", condition="Ready", status=~"unknown|false"} > 0))
      record: cluster:pod_utilization:ratio
    - expr: |
        1 - sum(max(node_filesystem_avail_bytes{device=~"/dev/.*", device!~"/dev/loop\\d+", job="node-exporter"}) by (device, instance)) / sum(max(node_filesystem_size_bytes{device=~"/dev/.*", device!~"/dev/loop\\d+", job="node-exporter"}) by (device, instance))
      record: cluster:disk_utilization:ratio
    - expr: |
        1 - sum(node:node_inodes_free:) / sum(node:node_inodes_total:)
      record: cluster:disk_inode_utilization:ratio
    - expr: |
        sum(kube_node_status_condition{job="kube-state-metrics", condition="Ready", status=~"unknown|false"})
      record: cluster:node_offline:sum
    - expr: |
        sum(kube_node_status_condition{job="kube-state-metrics", condition="Ready", status=~"unknown|false"}) / sum(kube_node_status_condition{job="kube-state-metrics", condition="Ready"})
      record: cluster:node_offline:ratio
  - name: namespace.rules
    rules:
    - expr: |
        (count(kube_pod_info{job="kube-state-metrics", node!=""}) by (namespace) - sum(kube_pod_status_phase{job="kube-state-metrics", phase="Succeeded"}) by (namespace)  - sum(kube_pod_status_ready{job="kube-state-metrics", condition="true"} * on (pod, namespace) kube_pod_status_phase{job="kube-state-metrics", phase="Running"}) by (namespace) - sum(kube_pod_container_status_waiting_reason{job="kube-state-metrics", reason="ContainerCreating"}) by (namespace)) * on (namespace) group_left(label_kubesphere_io_workspace)(kube_namespace_labels{job="kube-state-metrics"})
      record: namespace:pod_abnormal:count
    - expr: |
        namespace:pod_abnormal:count / (sum(kube_pod_status_phase{job="kube-state-metrics", phase!="Succeeded", namespace!=""}) by (namespace) * on (namespace) group_left(label_kubesphere_io_workspace)(kube_namespace_labels{job="kube-state-metrics"}))
      record: namespace:pod_abnormal:ratio
    - expr: |
        max(kube_resourcequota{job="kube-state-metrics", type="used"}) by (resource, namespace) / min(kube_resourcequota{job="kube-state-metrics", type="hard"}) by (resource, namespace) *  on (namespace) group_left(label_kubesphere_io_workspace) (kube_namespace_labels{job="kube-state-metrics"})
      record: namespace:resourcequota_used:ratio
    - expr: |
        sum (label_replace(label_join(sum(irate(container_cpu_usage_seconds_total{job="kubelet", pod_name!="", image!=""}[5m])) by (namespace, pod_name) * on (pod_name, namespace) group_left(owner_kind,owner_name) label_join(label_replace(label_join(label_replace(label_replace(kube_pod_owner{job="kube-state-metrics"},"owner_kind", "Deployment", "owner_kind", "ReplicaSet"), "owner_kind", "Pod", "owner_kind", "<none>"),"tmp",":","owner_name","pod"),"owner_name","$1","tmp","<none>:(.*)"), "pod_name", "", "pod", "_name"), "workload",":","owner_kind","owner_name"), "workload","$1","workload","(Deployment:.+)-(.+)")) by (namespace, workload, owner_kind)
      record: namespace:workload_cpu_usage:sum
    - expr: |
        sum (label_replace(label_join(sum(container_memory_usage_bytes{job="kubelet", pod_name!="", image!=""}) by (namespace, pod_name) * on (pod_name, namespace) group_left(owner_kind,owner_name) label_join(label_replace(label_join(label_replace(label_replace(kube_pod_owner{job="kube-state-metrics"},"owner_kind", "Deployment", "owner_kind", "ReplicaSet"), "owner_kind", "Pod", "owner_kind", "<none>"),"tmp",":","owner_name","pod"),"owner_name","$1","tmp","<none>:(.*)"), "pod_name", "", "pod", "_name"), "workload",":","owner_kind","owner_name"), "workload","$1","workload","(Deployment:.+)-(.+)")) by (namespace, workload, owner_kind)
      record: namespace:workload_memory_usage:sum
    - expr: |
        sum (label_replace(label_join(sum(container_memory_usage_bytes{job="kubelet", pod_name!="", image!=""} - container_memory_cache{job="kubelet", pod_name!="", image!=""}) by (namespace, pod_name) * on (pod_name, namespace) group_left(owner_kind,owner_name) label_join(label_replace(label_join(label_replace(label_replace(kube_pod_owner{job="kube-state-metrics"},"owner_kind", "Deployment", "owner_kind", "ReplicaSet"), "owner_kind", "Pod", "owner_kind", "<none>"),"tmp",":","owner_name","pod"),"owner_name","$1","tmp","<none>:(.*)"), "pod_name", "", "pod", "_name"), "workload",":","owner_kind","owner_name"), "workload","$1","workload","(Deployment:.+)-(.+)")) by (namespace, workload, owner_kind)
      record: namespace:workload_memory_usage_wo_cache:sum
    - expr: |
        sum (label_replace(label_join(sum(irate(container_network_transmit_bytes_total{pod_name!="", interface!~"^(cali.+|tunl.+|dummy.+|kube.+|flannel.+|cni.+|docker.+|veth.+|lo.*)", job="kubelet"}[5m])) by (namespace, pod_name) * on (pod_name, namespace) group_left(owner_kind,owner_name) label_join(label_replace(label_join(label_replace(label_replace(kube_pod_owner{job="kube-state-metrics"},"owner_kind", "Deployment", "owner_kind", "ReplicaSet"), "owner_kind", "Pod", "owner_kind", "<none>"),"tmp",":","owner_name","pod"),"owner_name","$1","tmp","<none>:(.*)"), "pod_name", "", "pod", "_name"), "workload",":","owner_kind","owner_name"), "workload","$1","workload","(Deployment:.+)-(.+)")) by (namespace, workload, owner_kind)
      record: namespace:workload_net_bytes_transmitted:sum_irate
    - expr: |
        sum (label_replace(label_join(sum(irate(container_network_receive_bytes_total{pod_name!="", interface!~"^(cali.+|tunl.+|dummy.+|kube.+|flannel.+|cni.+|docker.+|veth.+|lo.*)", job="kubelet"}[5m])) by (namespace, pod_name) * on (pod_name, namespace) group_left(owner_kind,owner_name) label_join(label_replace(label_join(label_replace(label_replace(kube_pod_owner{job="kube-state-metrics"},"owner_kind", "Deployment", "owner_kind", "ReplicaSet"), "owner_kind", "Pod", "owner_kind", "<none>"),"tmp",":","owner_name","pod"),"owner_name","$1","tmp","<none>:(.*)"), "pod_name", "", "pod", "_name"), "workload",":","owner_kind","owner_name"), "workload","$1","workload","(Deployment:.+)-(.+)")) by (namespace, workload, owner_kind)
      record: namespace:workload_net_bytes_received:sum_irate
    - expr: |
        label_replace(label_replace(sum(kube_deployment_status_replicas_unavailable{job="kube-state-metrics"}) by (deployment, namespace) / sum(kube_deployment_spec_replicas{job="kube-state-metrics"}) by (deployment, namespace) * on (namespace) group_left(label_kubesphere_io_workspace)(kube_namespace_labels{job="kube-state-metrics"}), "workload","Deployment:$1", "deployment", "(.*)"), "owner_kind","Deployment", "", "")
      record: namespace:deployment_unavailable_replicas:ratio
    - expr: |
        label_replace(label_replace(sum(kube_daemonset_status_number_unavailable{job="kube-state-metrics"}) by (daemonset, namespace) / sum(kube_daemonset_status_desired_number_scheduled{job="kube-state-metrics"}) by (daemonset, namespace) * on (namespace) group_left(label_kubesphere_io_workspace)(kube_namespace_labels{job="kube-state-metrics"}) , "workload","DaemonSet:$1", "daemonset", "(.*)"), "owner_kind","DaemonSet", "", "")
      record: namespace:daemonset_unavailable_replicas:ratio
    - expr: |
        label_replace(label_replace((1 - sum(kube_statefulset_status_replicas_current{job="kube-state-metrics"}) by (statefulset, namespace) / sum(kube_statefulset_replicas{job="kube-state-metrics"}) by (statefulset, namespace)) * on (namespace) group_left(label_kubesphere_io_workspace)(kube_namespace_labels{job="kube-state-metrics"}) , "workload","StatefulSet:$1", "statefulset", "(.*)"), "owner_kind","StatefulSet", "", "")
      record: namespace:statefulset_unavailable_replicas:ratio
  - name: etcd.rules
    rules:
    - expr: |
        sum(up{job="etcd"} == 1)
      record: etcd:up:sum
    - expr: |
        sum(label_replace(sum(changes(etcd_server_leader_changes_seen_total{job="etcd"}[1h])) by (instance), "node", "$1", "instance", "(.*):.*")) by (node)
      record: etcd:etcd_server_leader_changes_seen:sum_changes
    - expr: |
        sum(label_replace(sum(irate(etcd_server_proposals_failed_total{job="etcd"}[5m])) by (instance), "node", "$1", "instance", "(.*):.*")) by (node)
      record: etcd:etcd_server_proposals_failed:sum_irate
    - expr: |
        sum(label_replace(sum(irate(etcd_server_proposals_applied_total{job="etcd"}[5m])) by (instance), "node", "$1", "instance", "(.*):.*")) by (node)
      record: etcd:etcd_server_proposals_applied:sum_irate
    - expr: |
        sum(label_replace(sum(irate(etcd_server_proposals_committed_total{job="etcd"}[5m])) by (instance), "node", "$1", "instance", "(.*):.*")) by (node)
      record: etcd:etcd_server_proposals_committed:sum_irate
    - expr: |
        sum(label_replace(sum(etcd_server_proposals_pending{job="etcd"}) by (instance), "node", "$1", "instance", "(.*):.*")) by (node)
      record: etcd:etcd_server_proposals_pending:sum
    - expr: |
        sum(label_replace(etcd_debugging_mvcc_db_total_size_in_bytes{job="etcd"},"node", "$1", "instance", "(.*):.*")) by (node)
      record: etcd:etcd_debugging_mvcc_db_total_size:sum
    - expr: |
        sum(label_replace(etcd_mvcc_db_total_size_in_bytes{job="etcd"},"node", "$1", "instance", "(.*):.*")) by (node)
      record: etcd:etcd_mvcc_db_total_size:sum
    - expr: |
        sum(label_replace(sum(irate(etcd_network_client_grpc_received_bytes_total{job="etcd"}[5m])) by (instance), "node", "$1", "instance", "(.*):.*")) by (node)
      record: etcd:etcd_network_client_grpc_received_bytes:sum_irate
    - expr: |
        sum(label_replace(sum(irate(etcd_network_client_grpc_sent_bytes_total{job="etcd"}[5m])) by (instance), "node", "$1", "instance", "(.*):.*")) by (node)
      record: etcd:etcd_network_client_grpc_sent_bytes:sum_irate
    - expr: |
        sum(label_replace(sum(irate(grpc_server_started_total{job="etcd",grpc_type="unary"}[5m])) by (instance), "node", "$1", "instance", "(.*):.*")) by (node)
      record: etcd:grpc_server_started:sum_irate
    - expr: |
        sum(label_replace(sum(irate(grpc_server_handled_total{job="etcd",grpc_type="unary",grpc_code!="OK"}[5m])) by (instance), "node", "$1", "instance", "(.*):.*")) by (node)
      record: etcd:grpc_server_handled:sum_irate
    - expr: |
        sum(label_replace(sum(irate(grpc_server_msg_received_total{job="etcd"}[5m])) by (instance), "node", "$1", "instance", "(.*):.*")) by (node)
      record: etcd:grpc_server_msg_received:sum_irate
    - expr: |
        sum(label_replace(sum(irate(grpc_server_msg_sent_total{job="etcd"}[5m])) by (instance), "node", "$1", "instance", "(.*):.*")) by (node)
      record: etcd:grpc_server_msg_sent:sum_irate
    - expr: |
        sum(label_replace(sum(irate(etcd_disk_wal_fsync_duration_seconds_sum{job="etcd"}[5m])) by (instance) / sum(irate(etcd_disk_wal_fsync_duration_seconds_count{job="etcd"}[5m])) by (instance), "node", "$1", "instance", "(.*):.*")) by (node)
      record: etcd:etcd_disk_wal_fsync_duration:avg
    - expr: |
        sum(label_replace(sum(irate(etcd_disk_backend_commit_duration_seconds_sum{job="etcd"}[5m])) by (instance) / sum(irate(etcd_disk_backend_commit_duration_seconds_count{job="etcd"}[5m])) by (instance), "node", "$1", "instance", "(.*):.*")) by (node)
      record: etcd:etcd_disk_backend_commit_duration:avg
  - name: etcd_histogram.rules
    rules:
    - expr: |
        histogram_quantile(0.99, sum(label_replace(sum(irate(etcd_disk_wal_fsync_duration_seconds_bucket{job="etcd"}[5m])) by (instance, le), "node", "$1", "instance", "(.*):.*")) by (node, le))
      labels:
        quantile: "0.99"
      record: etcd:etcd_disk_wal_fsync_duration:histogram_quantile
    - expr: |
        histogram_quantile(0.9, sum(label_replace(sum(irate(etcd_disk_wal_fsync_duration_seconds_bucket{job="etcd"}[5m])) by (instance, le), "node", "$1", "instance", "(.*):.*")) by (node, le))
      labels:
        quantile: "0.9"
      record: etcd:etcd_disk_wal_fsync_duration:histogram_quantile
    - expr: |
        histogram_quantile(0.5, sum(label_replace(sum(irate(etcd_disk_wal_fsync_duration_seconds_bucket{job="etcd"}[5m])) by (instance, le), "node", "$1", "instance", "(.*):.*")) by (node, le))
      labels:
        quantile: "0.5"
      record: etcd:etcd_disk_wal_fsync_duration:histogram_quantile
    - expr: |
        histogram_quantile(0.99, sum(label_replace(sum(irate(etcd_disk_backend_commit_duration_seconds_bucket{job="etcd"}[5m])) by (instance, le), "node", "$1", "instance", "(.*):.*")) by (node, le))
      labels:
        quantile: "0.99"
      record: etcd:etcd_disk_backend_commit_duration:histogram_quantile
    - expr: |
        histogram_quantile(0.9, sum(label_replace(sum(irate(etcd_disk_backend_commit_duration_seconds_bucket{job="etcd"}[5m])) by (instance, le), "node", "$1", "instance", "(.*):.*")) by (node, le))
      labels:
        quantile: "0.9"
      record: etcd:etcd_disk_backend_commit_duration:histogram_quantile
    - expr: |
        histogram_quantile(0.5, sum(label_replace(sum(irate(etcd_disk_backend_commit_duration_seconds_bucket{job="etcd"}[5m])) by (instance, le), "node", "$1", "instance", "(.*):.*")) by (node, le))
      labels:
        quantile: "0.5"
      record: etcd:etcd_disk_backend_commit_duration:histogram_quantile
  - name: apiserver.rules
    rules:
    - expr: |
        sum(up{job="apiserver"} == 1)
      record: apiserver:up:sum
    - expr: |
        sum(irate(apiserver_request_count{job="apiserver"}[5m]))
      record: apiserver:apiserver_request_count:sum_irate
    - expr: |
        sum(irate(apiserver_request_count{job="apiserver"}[5m])) by (verb)
      record: apiserver:apiserver_request_count:sum_verb_irate
    - expr: |
        sum(irate(apiserver_request_latencies_sum{job="apiserver", verb!~"WATCH|CONNECT"}[5m])) / sum(irate(apiserver_request_latencies_count{job="apiserver", verb!~"WATCH|CONNECT"}[5m]))/ 1e+06
      record: apiserver:apiserver_request_latencies:avg
    - expr: |
        sum(irate(apiserver_request_latencies_sum{job="apiserver", verb!~"WATCH|CONNECT"}[5m])) by (verb) / sum(irate(apiserver_request_latencies_count{job="apiserver", verb!~"WATCH|CONNECT"}[5m])) by (verb) / 1e+06
      record: apiserver:apiserver_request_latencies:avg_by_verb
  - name: scheduler.rules
    rules:
    - expr: |
        sum(up{job="kube-scheduler"} == 1)
      record: scheduler:up:sum
    - expr: |
        sum(scheduler_schedule_attempts_total{job="kube-scheduler"}) by (result)
      record: scheduler:scheduler_schedule_attempts:sum
    - expr: |
        sum(rate(scheduler_schedule_attempts_total{job="kube-scheduler"}[5m])) by (result)
      record: scheduler:scheduler_schedule_attempts:sum_rate
    - expr: |
        (sum(rate(scheduler_e2e_scheduling_latency_microseconds_sum{job="kube-scheduler"}[1h]))  / sum(rate(scheduler_e2e_scheduling_latency_microseconds_count{job="kube-scheduler"}[1h]))) /  1e+06
      record: scheduler:scheduler_e2e_scheduling_latency:avg
  - name: scheduler_histogram.rules
    rules:
    - expr: |
        histogram_quantile(0.99, sum(rate(scheduler_e2e_scheduling_latency_microseconds_bucket{job="kube-scheduler"}[1h])) by (le) ) / 1e+06
      labels:
        quantile: "0.99"
      record: scheduler:scheduler_e2e_scheduling_latency:histogram_quantile
    - expr: |
        histogram_quantile(0.9, sum(rate(scheduler_e2e_scheduling_latency_microseconds_bucket{job="kube-scheduler"}[1h])) by (le) ) / 1e+06
      labels:
        quantile: "0.9"
      record: scheduler:scheduler_e2e_scheduling_latency:histogram_quantile
    - expr: |
        histogram_quantile(0.5, sum(rate(scheduler_e2e_scheduling_latency_microseconds_bucket{job="kube-scheduler"}[1h])) by (le) ) / 1e+06
      labels:
        quantile: "0.5"
      record: scheduler:scheduler_e2e_scheduling_latency:histogram_quantile
  - name: controller_manager.rules
    rules:
    - expr: |
        sum(up{job="kube-controller-manager"} == 1)
      record: controller_manager:up:sum
  - name: coredns.rules
    rules:
    - expr: |
        sum(up{job="coredns"} == 1)
      record: coredns:up:sum
    - expr: |
        sum(irate(coredns_cache_hits_total{job="coredns"}[5m]))
      record: coredns:coredns_cache_hits_total:sum_irate
    - expr: |
        sum(irate(coredns_cache_misses{job="coredns"}[5m]))
      record: coredns:coredns_cache_misses:sum_irate
    - expr: |
        sum(irate(coredns_dns_request_count_total{job="coredns"}[5m]))
      record: coredns:coredns_dns_request_count:sum_irate
    - expr: |
        sum(irate(coredns_dns_request_type_count_total{job="coredns"}[5m])) by (type)
      record: coredns:coredns_dns_request_type_count:sum_irate
    - expr: |
        sum(irate(coredns_dns_response_rcode_count_total{job="coredns"}[5m])) by (rcode)
      record: coredns:coredns_dns_response_rcode_count:sum_irate
    - expr: |
        sum(irate(coredns_panic_count_total{job="coredns"}[5m]))
      record: coredns:coredns_panic_count:sum_irate
    - expr: |
        sum(irate(coredns_proxy_request_count_total{job="coredns"}[5m]))
      record: coredns:coredns_proxy_request_count:sum_irate
    - expr: |
        sum(irate(coredns_dns_request_duration_seconds_sum{job="coredns"}[5m])) / sum(irate(coredns_dns_request_duration_seconds_count{job="coredns"}[5m]))
      record: coredns:coredns_dns_request_duration:avg
    - expr: |
        sum(irate(coredns_proxy_request_duration_seconds_sum{job="coredns"}[5m])) / sum(irate(coredns_proxy_request_duration_seconds_count{job="coredns"}[5m]))
      record: coredns:coredns_proxy_request_duration:avg
  - name: coredns_histogram.rules
    rules:
    - expr: |
        histogram_quantile(0.99, sum(irate(coredns_dns_request_duration_seconds_bucket{job="coredns"}[5m])) by (le))
      labels:
        quantile: "0.99"
      record: coredns:coredns_dns_request_duration:histogram_quantile
    - expr: |
        histogram_quantile(0.9, sum(irate(coredns_dns_request_duration_seconds_bucket{job="coredns"}[5m])) by (le))
      labels:
        quantile: "0.9"
      record: coredns:coredns_dns_request_duration:histogram_quantile
    - expr: |
        histogram_quantile(0.5, sum(irate(coredns_dns_request_duration_seconds_bucket{job="coredns"}[5m])) by (le))
      labels:
        quantile: "0.5"
      record: coredns:coredns_dns_request_duration:histogram_quantile
    - expr: |
        histogram_quantile(0.99, sum(irate(coredns_proxy_request_duration_seconds_bucket{job="coredns"}[5m])) by (le))
      labels:
        quantile: "0.99"
      record: coredns:coredns_proxy_request_duration:histogram_quantile
    - expr: |
        histogram_quantile(0.9, sum(irate(coredns_proxy_request_duration_seconds_bucket{job="coredns"}[5m])) by (le))
      labels:
        quantile: "0.9"
      record: coredns:coredns_proxy_request_duration:histogram_quantile
    - expr: |
        histogram_quantile(0.5, sum(irate(coredns_proxy_request_duration_seconds_bucket{job="coredns"}[5m])) by (le))
      labels:
        quantile: "0.5"
      record: coredns:coredns_proxy_request_duration:histogram_quantile
  - name: prometheus.rules
    rules:
    - expr: |
        sum(up{job=~"prometheus-k8s.*"} == 1)
      record: prometheus:up:sum
    - expr: |
        sum(rate(prometheus_tsdb_head_samples_appended_total{job=~"prometheus-k8s.*"} [5m])) by (job, pod)
      record: prometheus:prometheus_tsdb_head_samples_appended:sum_rate
---

# PVCS
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: kubesphere-system
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  volumeMode: Filesystem
---

# Deployments
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ks-account
    tier: backend
    version: v2.1.0
  name: ks-account
  namespace: kubesphere-system
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: ks-account
      tier: backend
      version: v2.1.0
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ks-account
        tier: backend
        version: v2.1.0
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - ks-account
            namespaces:
            - kubesphere-system
            topologyKey: kubernetes.io/hostname
      containers:
      - command:
        - ks-iam
        - --logtostderr=true
        - --jwt-secret=$(JWT_SECRET)
        - --admin-password=$(ADMIN_PASSWORD)
        - --enable-multi-login=False
        - --token-idle-timeout=40m
        - --generate-kubeconfig=False
        env:
        - name: KUBECTL_IMAGE
          value: kubesphere/kubectl:v1.0.0
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              key: jwt-secret
              name: ks-account-secret
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: admin-password
              name: ks-account-secret
        image: kubesphere/ks-account:v2.1.0
        imagePullPolicy: IfNotPresent
        name: ks-account
        ports:
        - containerPort: 9090
          protocol: TCP
        resources:
          limits:
            cpu: "1"
            memory: 500Mi
          requests:
            cpu: 20m
            memory: 100Mi
        volumeMounts:
        - mountPath: /etc/kubesphere/rules
          name: policy-rules
        - mountPath: /etc/kubesphere
          name: kubesphere-config
      initContainers:
      - command:
        - sh
        - -c
        - until nc -z redis.kubesphere-system.svc 6379; do echo "waiting for redis";
          sleep 2; done;
        image: busybox:1.28.4
        imagePullPolicy: IfNotPresent
        name: wait-redis
      - command:
        - sh
        - -c
        - until nc -z openldap.kubesphere-system.svc 389; do echo "waiting for ldap";
          sleep 2; done;
        image: busybox:1.28.4
        imagePullPolicy: IfNotPresent
        name: wait-ldap
      serviceAccount: kubesphere
      serviceAccountName: kubesphere
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoExecute
        key: node.kubernetes.io/not-ready
        operator: Exists
        tolerationSeconds: 60
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 60
      volumes:
      - configMap:
          defaultMode: 420
          name: policy-rules
        name: policy-rules
      - configMap:
          defaultMode: 420
          name: kubesphere-config
        name: kubesphere-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ks-apigateway
    tier: backend
    version: v2.1.0
  name: ks-apigateway
  namespace: kubesphere-system
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: ks-apigateway
      tier: backend
      version: v2.1.0
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ks-apigateway
        tier: backend
        version: v2.1.0
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - ks-apigateway
            namespaces:
            - kubesphere-system
            topologyKey: kubernetes.io/hostname
      containers:
      - command:
        - /bin/sh
        - -c
        - export KUBESPHERE_TOKEN=`cat /var/run/secrets/kubernetes.io/serviceaccount/token`
          && ks-apigateway --conf=/etc/caddy/Caddyfile --log=stderr
        env:
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              key: jwt-secret
              name: ks-account-secret
        image: kubesphere/ks-apigateway:v2.1.0
        imagePullPolicy: IfNotPresent
        name: ks-apigateway
        ports:
        - containerPort: 2018
          protocol: TCP
        resources:
          limits:
            cpu: "1"
            memory: 500Mi
          requests:
            cpu: 20m
            memory: 100Mi
        volumeMounts:
        - mountPath: /etc/caddy
          name: caddyfile
        - mountPath: /etc/kubesphere
          name: kubesphere-config
      serviceAccount: kubesphere
      serviceAccountName: kubesphere
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoExecute
        key: node.kubernetes.io/not-ready
        operator: Exists
        tolerationSeconds: 60
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 60
      volumes:
      - configMap:
          defaultMode: 420
          name: caddyfile
        name: caddyfile
      - configMap:
          defaultMode: 420
          name: kubesphere-config
        name: kubesphere-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ks-apiserver
    tier: backend
    version: v2.1.0
  name: ks-apiserver
  namespace: kubesphere-system
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: ks-apiserver
      tier: backend
      version: v2.1.0
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ks-apiserver
        tier: backend
        version: v2.1.0
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - ks-apiserver
            namespaces:
            - kubesphere-system
            topologyKey: kubernetes.io/hostname
      containers:
      - command:
        - ks-apiserver
        - --logtostderr=true
        image: kubesphere/ks-apiserver:v2.1.0
        imagePullPolicy: IfNotPresent
        name: ks-apiserver
        ports:
        - containerPort: 9090
          protocol: TCP
        resources:
          limits:
            cpu: "1"
            memory: 1Gi
          requests:
            cpu: 20m
            memory: 100Mi
        volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-sock
        - mountPath: /etc/kubesphere/ingress-controller
          name: ks-router-config
        - mountPath: /etc/kubesphere/rules
          name: policy-rules
        - mountPath: /etc/kubesphere/
          name: kubesphere-config
      serviceAccount: kubesphere
      serviceAccountName: kubesphere
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoExecute
        key: node.kubernetes.io/not-ready
        operator: Exists
        tolerationSeconds: 60
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 60
      volumes:
      - name: ca-dir
        secret:
          defaultMode: 420
          secretName: kubesphere-ca
      - hostPath:
          path: /var/run/docker.sock
          type: ""
        name: docker-sock
      - configMap:
          defaultMode: 420
          name: ks-router-config
        name: ks-router-config
      - configMap:
          defaultMode: 420
          name: policy-rules
        name: policy-rules
      - configMap:
          defaultMode: 420
          name: kubesphere-config
        name: kubesphere-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ks-console
    tier: frontend
    version: v2.1.0
  name: ks-console
  namespace: kubesphere-system
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: ks-console
      tier: frontend
      version: v2.1.0
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ks-console
        tier: frontend
        version: v2.1.0
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - ks-console
            namespaces:
            - kubesphere-system
            topologyKey: kubernetes.io/hostname
      containers:
      - image: kubesphere/ks-console:v2.1.0
        imagePullPolicy: IfNotPresent
        name: ks-console
        resources:
          limits:
            cpu: "1"
            memory: 512Mi
          requests:
            cpu: 20m
            memory: 100Mi
        volumeMounts:
        - mountPath: /root/KubeSphereUI/server/local_config.yaml
          name: ks-console-config
          subPath: local_config.yaml
        - mountPath: /root/KubeSphereUI/server/sample
          name: sample-bookinfo
      serviceAccount: kubesphere
      serviceAccountName: kubesphere
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoExecute
        key: node.kubernetes.io/not-ready
        operator: Exists
        tolerationSeconds: 60
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 60
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: local_config.yaml
            path: local_config.yaml
          name: ks-console-config
        name: ks-console-config
      - configMap:
          defaultMode: 420
          name: sample-bookinfo
        name: sample-bookinfo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ks-controller-manager
    tier: backend
    version: v2.1.0
  name: ks-controller-manager
  namespace: kubesphere-system
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: ks-controller-manager
      tier: backend
      version: v2.1.0
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ks-controller-manager
        tier: backend
        version: v2.1.0
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - ks-controller-manager
            namespaces:
            - kubesphere-system
            topologyKey: kubernetes.io/hostname
      containers:
      - command:
        - controller-manager
        - --logtostderr=true
        image: kubesphere/ks-controller-manager:v2.1.0
        imagePullPolicy: IfNotPresent
        name: ks-controller-manager
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 50Mi
        volumeMounts:
        - mountPath: /etc/kubesphere/
          name: kubesphere-config
      serviceAccount: kubesphere
      serviceAccountName: kubesphere
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoExecute
        key: node.kubernetes.io/not-ready
        operator: Exists
        tolerationSeconds: 60
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 60
      volumes:
      - configMap:
          defaultMode: 420
          name: kubesphere-config
        name: kubesphere-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis
    tier: database
  name: redis
  namespace: kubesphere-system
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: redis
      tier: database
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: redis
        tier: database
        version: redis-4.0
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: In
                values:
                - ""
            weight: 100
      containers:
      - image: redis:5.0.5-alpine
        imagePullPolicy: IfNotPresent
        name: redis
        ports:
        - containerPort: 6379
          protocol: TCP
        resources:
          limits:
            cpu: "1"
            memory: 1000Mi
          requests:
            cpu: 50m
            memory: 100Mi
        volumeMounts:
        - mountPath: /data
          name: redis-pvc
          subPath: redis-data
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - key: CriticalAddonsOnly
        operator: Exists
      volumes:
      - name: redis-pvc
        persistentVolumeClaim:
          claimName: redis-pvc
---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kube-state-metrics
  name: kube-state-metrics
  namespace: kubesphere-monitoring-system
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: kube-state-metrics
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: kube-state-metrics
    spec:
      containers:
      - args:
        - --secure-listen-address=:8443
        - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
        - --upstream=http://127.0.0.1:8081/
        image: kubesphere/kube-rbac-proxy:v0.4.1
        imagePullPolicy: IfNotPresent
        name: kube-rbac-proxy-main
        ports:
        - containerPort: 8443
          name: https-main
          protocol: TCP
        resources:
          requests:
            cpu: 10m
            memory: 20Mi
      - args:
        - --secure-listen-address=:9443
        - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
        - --upstream=http://127.0.0.1:8082/
        image: kubesphere/kube-rbac-proxy:v0.4.1
        imagePullPolicy: IfNotPresent
        name: kube-rbac-proxy-self
        ports:
        - containerPort: 9443
          name: https-self
          protocol: TCP
        resources:
          requests:
            cpu: 10m
            memory: 20Mi
      - args:
        - --host=127.0.0.1
        - --port=8081
        - --telemetry-host=127.0.0.1
        - --telemetry-port=8082
        image: kubesphere/kube-state-metrics:v1.5.2
        imagePullPolicy: IfNotPresent
        name: kube-state-metrics
        resources:
          limits:
            cpu: 32m
            memory: 180Mi
          requests:
            cpu: 32m
            memory: 180Mi
      - command:
        - /pod_nanny
        - --container=kube-state-metrics
        - --cpu=30m
        - --extra-cpu=2m
        - --memory=150Mi
        - --extra-memory=30Mi
        - --threshold=5
        - --deployment=kube-state-metrics
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: kubesphere/addon-resizer:1.8.4
        imagePullPolicy: IfNotPresent
        name: addon-resizer
        resources:
          requests:
            cpu: 10m
            memory: 30Mi
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccount: kube-state-metrics
      serviceAccountName: kube-state-metrics
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: prometheus-operator
  name: prometheus-operator
  namespace: kubesphere-monitoring-system
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: prometheus-operator
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        k8s-app: prometheus-operator
    spec:
      containers:
      - args:
        - --kubelet-service=kube-system/kubelet
        - --logtostderr=true
        - --config-reloader-image=kubesphere/configmap-reload:v0.0.1
        - --prometheus-config-reloader=kubesphere/prometheus-config-reloader:v0.27.1
        image: kubesphere/prometheus-operator:v0.27.1
        imagePullPolicy: IfNotPresent
        name: prometheus-operator
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 10m
            memory: 100Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccount: prometheus-operator
      serviceAccountName: prometheus-operator
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kubernetes.io/created-by: kubesphere.io/ks-router
  labels:
    app: kubesphere
    component: kubesphere-router
    version: express-1.0.alpha
  name: default-http-backend
  namespace: kubesphere-controls-system
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: kubesphere
      component: kubesphere-router
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: kubesphere
        component: kubesphere-router
    spec:
      containers:
      - image: mirrorgooglecontainers/defaultbackend-amd64:1.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: default-http-backend
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi
---
# Statefulsets
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/instance: ks-openldap
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: openldap-ha
    app.kubernetes.io/version: "1.0"
    helm.sh/chart: openldap-ha-0.1.0
  name: openldap
  namespace: kubesphere-system
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: ks-openldap
      app.kubernetes.io/name: openldap-ha
  serviceName: openldap
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: ks-openldap
        app.kubernetes.io/name: openldap-ha
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: In
                values:
                - ""
            weight: 100
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/instance: ks-openldap
                app.kubernetes.io/name: openldap-ha
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - --copy-service
        - --loglevel=warning
        env:
        - name: LDAP_ORGANISATION
          value: kubesphere
        - name: LDAP_DOMAIN
          value: kubesphere.io
        - name: LDAP_CONFIG_PASSWORD
          value: admin
        - name: LDAP_ADMIN_PASSWORD
          value: admin
        - name: LDAP_REPLICATION
          value: "false"
        - name: LDAP_TLS
          value: "false"
        - name: LDAP_REMOVE_CONFIG_AFTER_SETUP
          value: "true"
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: HOSTNAME
          value: $(MY_POD_NAME).openldap
        image: osixia/openldap:1.3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          tcpSocket:
            port: 389
          timeoutSeconds: 1
        name: openldap-ha
        ports:
        - containerPort: 389
          name: ldap
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          tcpSocket:
            port: 389
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /var/lib/ldap
          name: openldap-pvc
          subPath: ldap-data
        - mountPath: /etc/ldap/slapd.d
          name: openldap-pvc
          subPath: ldap-config
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - key: CriticalAddonsOnly
        operator: Exists
      volumes:
      - name: openldap-pvc
        persistentVolumeClaim:
          claimName: openldap-pvc
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: openldap-pvc
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      volumeMode: Filesystem
---

# Daemonset
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: node-exporter
  name: node-exporter
  namespace: kubesphere-monitoring-system
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: node-exporter
  template:
    metadata:
      labels:
        app: node-exporter
    spec:
      containers:
      - args:
        - --web.listen-address=127.0.0.1:9100
        - --path.procfs=/host/proc
        - --path.sysfs=/host/sys
        - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+)($|/)
        - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$
        image: kubesphere/node-exporter:ks-v0.16.0
        imagePullPolicy: IfNotPresent
        name: node-exporter
        resources:
          limits:
            cpu: 250m
            memory: 180Mi
          requests:
            cpu: 10m
            memory: 180Mi
        volumeMounts:
        - mountPath: /host/proc
          name: proc
        - mountPath: /host/sys
          name: sys
        - mountPath: /host/root
          mountPropagation: HostToContainer
          name: root
          readOnly: true
      - args:
        - --secure-listen-address=$(IP):9100
        - --upstream=http://127.0.0.1:9100/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        image: kubesphere/kube-rbac-proxy:v0.4.1
        imagePullPolicy: IfNotPresent
        name: kube-rbac-proxy
        ports:
        - containerPort: 9100
          hostPort: 9100
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 20m
            memory: 40Mi
          requests:
            cpu: 10m
            memory: 20Mi
      hostNetwork: true
      hostPID: true
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccount: node-exporter
      serviceAccountName: node-exporter
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - key: dedicated
        operator: Exists
      volumes:
      - hostPath:
          path: /proc
          type: ""
        name: proc
      - hostPath:
          path: /sys
          type: ""
        name: sys
      - hostPath:
          path: /
          type: ""
        name: root
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
---

# Service
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ks-account
    tier: backend
    version: v2.1.0
  name: ks-account
  namespace: kubesphere-system
spec:
  ports:
  - name: ks-account
    port: 80
    protocol: TCP
    targetPort: 9090
  selector:
    app: ks-account
    tier: backend
    version: v2.1.0
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ks-apigateway
    tier: backend
    version: v2.1.0
  name: ks-apigateway
  namespace: kubesphere-system
spec:
  ports:
  - name: 80-2018
    port: 80
    protocol: TCP
    targetPort: 2018
  selector:
    app: ks-apigateway
    tier: backend
    version: v2.1.0
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ks-apiserver
    tier: backend
    version: v2.1.0
  name: ks-apiserver
  namespace: kubesphere-system
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 9090
  selector:
    app: ks-apiserver
    tier: backend
    version: v2.1.0
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ks-console
    tier: frontend
    version: v2.1.0
  name: ks-console
  namespace: kubesphere-system
spec:
  ports:
  - name: nginx
    nodePort: 30880
    port: 80
    protocol: TCP
    targetPort: 8000
  selector:
    app: ks-console
    tier: frontend
    version: v2.1.0
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: ks-openldap
    app.kubernetes.io/name: openldap-ha
  name: openldap
  namespace: kubesphere-system
spec:
  clusterIP: None
  ports:
  - name: ldap
    port: 389
    protocol: TCP
    targetPort: 389
  selector:
    app.kubernetes.io/instance: ks-openldap
    app.kubernetes.io/name: openldap-ha
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
    tier: database
  name: redis
  namespace: kubesphere-system
spec:
  ports:
  - name: redis
    port: 6379
    protocol: TCP
    targetPort: 6379
  selector:
    app: redis
    tier: database
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: kube-state-metrics
  name: kube-state-metrics
  namespace: kubesphere-monitoring-system
spec:
  clusterIP: None
  ports:
  - name: https-main
    port: 8443
    protocol: TCP
    targetPort: https-main
  - name: https-self
    port: 9443
    protocol: TCP
    targetPort: https-self
  selector:
    app: kube-state-metrics
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: node-exporter
  name: node-exporter
  namespace: kubesphere-monitoring-system
spec:
  clusterIP: None
  ports:
  - name: https
    port: 9100
    protocol: TCP
    targetPort: https
  selector:
    app: node-exporter
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: prometheus-operator
  name: prometheus-operator
  namespace: kubesphere-monitoring-system
spec:
  clusterIP: None
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: http
  selector:
    k8s-app: prometheus-operator
  sessionAffinity: None
  type: ClusterIP